def notifyObj
node("")
{
   env.WORKSPACE=pwd()
   try
   {
      stage("Checkout")
      { 
         git branch: "${OSSIM_GIT_BRANCH}", 
         url: "${GIT_PUBLIC_SERVER_URL}/opencv-3.2-minimal-for-ossim.git"
         sh "pwd"        
         sh "ls -la"
      }
      
      stage("Download Artifacts")
      {
         step ([$class: "CopyArtifact",
                projectName: "ossim-ci-${OSSIM_GIT_BRANCH}",
                filter: "ossim-ci-${OSSIM_GIT_BRANCH}.tgz",
                flatten: true])
         sh "tar xvfz ossim-ci-${OSSIM_GIT_BRANCH}.tgz"
         notifyObj = load "${env.WORKSPACE}/ossim-ci/jenkins/pipeline/notify.groovy"
      }
      
      stage("Build")
      {
         sh """
            pushd ${env.WORKSPACE}/opencv-3.2-minimal-for-ossim/scripts
            ./build.sh ${env.WORKSPACE}/install
            popd
         """
      }
      
      stage("Archive")
      {
         sh "tar cvfz opencv-minimal.tgz -C install ."
         archiveArtifacts "opencv-minimal.tgz"
      }
   }
   catch(e)
   {
      echo e.toString()
      currentBuild.result = "FAILED"
      notifyObj?.notifyFailed()
   }

   stage("Clean Workspace")
   {
      step([$class: 'WsCleanup'])
   }
}
